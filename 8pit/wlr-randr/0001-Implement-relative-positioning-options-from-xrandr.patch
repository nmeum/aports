From 478e93eed23500351fa606fb7706a0297548a049 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=B6ren=20Tempel?= <soeren@soeren-tempel.net>
Date: Sat, 16 Mar 2024 13:29:14 +0100
Subject: [PATCH wlr-randr] Implement relative positioning options from xrandr

This implements the --above, --below, --right-of, and --left-of
positioning options from xrandr(1). The code is heavily inspired by
xrandr's implementation [1]. The functionality is intended to be
equivalent. The --same-as option has not been implemented but can
easily be added as well, if deemed useful.

Absolute positioning via --pos overwrites a previously established
relative position and vice versa. The last positioning option passed
on the command-line takes precedence.

Contrary to xrandr, this implementation does currently not detect
loops in relative specifications. This could be implemented in future
work.

[1]: https://gitlab.freedesktop.org/xorg/app/xrandr/-/blob/xrandr-1.5.2/xrandr.c?ref_type=tags#L2004-L2024
---
 main.c | 76 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 74 insertions(+), 2 deletions(-)

diff --git a/main.c b/main.c
index 527379f..ef90991 100644
--- a/main.c
+++ b/main.c
@@ -75,6 +75,40 @@ static const char *output_transform_map[] = {
 	[WL_OUTPUT_TRANSFORM_FLIPPED_270] = "flipped-270",
 };
 
+static int32_t head_height(struct randr_head *head) {
+	switch (head->transform) {
+	case WL_OUTPUT_TRANSFORM_NORMAL:
+	case WL_OUTPUT_TRANSFORM_FLIPPED:
+	case WL_OUTPUT_TRANSFORM_180:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+		return head->mode->height / head->scale;
+	case WL_OUTPUT_TRANSFORM_90:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_90:
+	case WL_OUTPUT_TRANSFORM_270:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_270:
+		return head->mode->width / head->scale;
+	}
+
+	assert(0 && "unreachable");
+}
+
+static int32_t head_width(struct randr_head *head) {
+	switch (head->transform) {
+	case WL_OUTPUT_TRANSFORM_NORMAL:
+	case WL_OUTPUT_TRANSFORM_FLIPPED:
+	case WL_OUTPUT_TRANSFORM_180:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+		return head->mode->width / head->scale;
+	case WL_OUTPUT_TRANSFORM_90:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_90:
+	case WL_OUTPUT_TRANSFORM_270:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_270:
+		return head->mode->height / head->scale;
+	}
+
+	assert(0 && "unreachable");
+}
+
 static void print_state(struct randr_state *state) {
 	struct randr_head *head;
 	wl_list_for_each(head, &state->heads, link) {
@@ -615,6 +649,10 @@ static const struct option long_options[] = {
 	{"preferred", no_argument, 0, 0},
 	{"custom-mode", required_argument, 0, 0},
 	{"pos", required_argument, 0, 0},
+	{"left-of", required_argument, 0, 0},
+	{"right-of", required_argument, 0, 0},
+	{"above", required_argument, 0, 0},
+	{"below", required_argument, 0, 0},
 	{"transform", required_argument, 0, 0},
 	{"scale", required_argument, 0, 0},
 	{"adaptive-sync", required_argument, 0, 0},
@@ -696,7 +734,7 @@ static void fixup_disabled_head(struct randr_head *head) {
 	}
 }
 
-static bool parse_output_arg(struct randr_head *head,
+static bool parse_output_arg(struct randr_state *state, struct randr_head *head,
 		const char *name, const char *value) {
 	if (strcmp(name, "on") == 0) {
 		if (!head->enabled) {
@@ -788,6 +826,36 @@ static bool parse_output_arg(struct randr_head *head,
 		head->changed |= RANDR_HEAD_POSITION;
 		head->x = x;
 		head->y = y;
+	} else if (strcmp(name, "left-of") == 0 ||
+		   strcmp(name, "right-of") == 0 ||
+		   strcmp(name, "above") == 0 ||
+		   strcmp(name, "below") == 0) {
+		struct randr_head *relation, *tmp_head;
+		wl_list_for_each_safe(relation, tmp_head, &state->heads, link) {
+			if (strcmp(relation->name, value) != 0) {
+				continue;
+			}
+
+			if (strcmp(name, "left-of") == 0) {
+				head->y = relation->y;
+				head->x = relation->x - head_width(head);
+			} else if (strcmp(name, "right-of") == 0) {
+				head->y = relation->y;
+				head->x = relation->x + head_width(relation);
+			} else if (strcmp(name, "above") == 0) {
+				head->x = relation->x;
+				head->y = relation->y - head_height(head);
+			} else if (strcmp(name, "below") == 0) {
+				head->x = relation->x;
+				head->y = relation->y + head_height(relation);
+			}
+
+			head->changed |= RANDR_HEAD_POSITION;
+			return true;
+		}
+
+		fprintf(stderr, "invalid output: %s\n", value);
+		return false;
 	} else if (strcmp(name, "transform") == 0) {
 		bool found = false;
 		size_t len =
@@ -851,6 +919,10 @@ static const char usage[] =
 	"  --mode|--custom-mode <width>x<height>[@<refresh>Hz]\n"
 	"  --preferred\n"
 	"  --pos <x>,<y>\n"
+	"  --left-of <name>\n"
+	"  --right-of <name>\n"
+	"  --above <name>\n"
+	"  --below <name>\n"
 	"  --transform normal|90|180|270|flipped|flipped-90|flipped-180|flipped-270\n"
 	"  --scale <factor>\n"
 	"  --adaptive-sync enabled|disabled\n";
@@ -924,7 +996,7 @@ int main(int argc, char *argv[]) {
 				return EXIT_FAILURE;
 			}
 
-			if (!parse_output_arg(current_head, name, value)) {
+			if (!parse_output_arg(&state, current_head, name, value)) {
 				return EXIT_FAILURE;
 			}
 
